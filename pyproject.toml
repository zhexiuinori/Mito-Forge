[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mito-forge"
version = "0.1.0"
description = "基于联邦知识系统的多智能体线粒体基因组学专家级自动化框架"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Mito-Forge Team", email = "contact@mito-forge.org"}
]
keywords = ["bioinformatics", "mitochondrial", "genomics", "multi-agent", "AI"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    # 核心依赖
    "PyYAML>=6.0",
    "requests>=2.31.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    
    # AI 和数据处理
    "langchain>=0.1.0",
    "pydantic>=2.5.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "biopython>=1.81",
    
    # Web 和存储
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "chromadb>=0.4.18",
    
    # 工具库
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]

web = [
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "dash>=2.14.0",
]

[project.urls]
Homepage = "https://github.com/your-org/mito-forge"
Documentation = "https://mito-forge.readthedocs.io"
Repository = "https://github.com/your-org/mito-forge.git"
"Bug Tracker" = "https://github.com/your-org/mito-forge/issues"

[project.scripts]
mito-forge = "mito_forge.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["mito_forge*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]